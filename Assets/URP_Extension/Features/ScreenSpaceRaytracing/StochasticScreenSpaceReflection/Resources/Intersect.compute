/**********************************************************************
Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
********************************************************************/
#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
#pragma kernel Intersect
// #pragma use_dxc
#pragma enable_d3d11_debug_symbols


static const float g_roughness_sigma_min = 0.01f;
static const float g_roughness_sigma_max = 0.02f;
static const float g_depth_sigma = 0.02f;
CBUFFER_START(cb)
    // float g_temporal_stability_factor;
    float g_depth_buffer_thickness;
    // float g_roughness_threshold;
    // float g_temporal_variance_threshold;
    // uint g_frame_index;
    uint g_max_traversal_intersections;
    uint g_min_traversal_occupancy;
    uint g_most_detailed_mip;
    // uint g_samples_per_quad;
    // uint g_temporal_variance_guided_tracing_enabled;
    float2 g_buffer_dimensions;
CBUFFER_END


Texture2D<float4> _CameraColor : register(t0);
Texture2D<float> _HierarchyDepthTexture : register(t1);
Texture2D<float4> _NormalSmoothness : register(t2);
Texture2D<float4> CameraGBufferTexture1 : register(t3);
// Texture2D<float> g_roughness                                          : register(t3);
TextureCube<float4> _EnvironmentTexture : register(t4);
Texture2D<float2> _BlueNoiseTexture : register(t5);

// SamplerState g_environment_map_sampler                                : register(s0);

RWTexture2D<float4> g_intersection_output : register(u0);


#include "RayMarching.hlsl"


[numthreads(8, 8, 1)]
void Intersect(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    int2 coords = dispatchThreadId.xy;

    const uint2 screen_size = g_buffer_dimensions;

    float2 uv = (coords + 0.5) * rcp(g_buffer_dimensions);

    float3 world_space_normal = FFX_SSSR_LoadWorldSpaceNormal(coords);
    float roughness = 1 - _NormalSmoothness.Load(int3(coords, 0)).w;
    bool is_mirror = IsMirrorReflection(roughness);

    int most_detailed_mip = is_mirror ? 0 : g_most_detailed_mip;
    float2 mip_resolution = FFX_SSSR_GetMipResolution(screen_size, most_detailed_mip);
    float z = FFX_SSSR_LoadDepth(uv * mip_resolution, most_detailed_mip);

    float3 screen_uv_space_ray_origin = float3(uv, z);
    float3 view_space_ray = ScreenSpaceToViewSpace(screen_uv_space_ray_origin);
    float3 view_space_ray_direction = normalize(view_space_ray);

    float3 view_space_surface_normal = mul(UNITY_MATRIX_V, float4(world_space_normal, 0)).xyz;
    float3 view_space_reflected_direction = SampleReflectionVector(view_space_ray_direction, view_space_surface_normal,
                                                                   roughness, coords);
    float3 screen_space_ray_direction = ProjectDirection(view_space_ray, view_space_reflected_direction,
                                                         screen_uv_space_ray_origin, UNITY_MATRIX_P);

    //====SSSR====
    bool valid_hit = false;
    float3 hit = FFX_SSSR_HierarchicalRaymarch(screen_uv_space_ray_origin, screen_space_ray_direction, is_mirror,
                                               screen_size, most_detailed_mip, g_min_traversal_occupancy,
                                               g_max_traversal_intersections, valid_hit);

    float3 world_space_origin = ScreenSpaceToWorldSpace(screen_uv_space_ray_origin);
    float3 world_space_hit = ScreenSpaceToWorldSpace(hit);
    float3 world_space_ray = world_space_hit - world_space_origin.xyz;

    float confidence = valid_hit
                           ? FFX_SSSR_ValidateHit(hit, uv, world_space_ray, screen_size, g_depth_buffer_thickness)
                           : 0;
    float world_ray_length = max(0, length(world_space_ray));

    float3 reflection_radiance = 0;
    if (confidence > 0)
    {
        // Found an intersection with the depth buffer -> We can lookup the color from lit scene.
        reflection_radiance = _CameraColor.Load(int3(screen_size * hit.xy, 0)).xyz;
    }

    // Sample environment map.
    float3 world_space_reflected_direction = mul(UNITY_MATRIX_I_V, float4(view_space_reflected_direction, 0)).xyz;
    float3 environment_lookup = SampleEnvironmentMap(world_space_reflected_direction);
    reflection_radiance = lerp(environment_lookup, reflection_radiance, confidence);

    float4 new_sample = float4(reflection_radiance, world_ray_length);
    g_intersection_output[coords] = new_sample;
}
